image: ubuntu:focal

stages:
  - test
  - deploy
  - release

variables:
  LOWER_PROJECT_NAME: "shm_stream"
  UPPER_PROJECT_NAME: "SHM_STREAM"
  CONAN_PACKAGE_NAME: "cpp-shm-stream"
  CONAN_USER: "MusicScience37"
  SECURE_LOG_LEVEL: debug

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
dependency_scanning:
  needs: []
sast:
  needs: []
license_scanning:
  needs: []

line count:
  stage: test
  needs: []
  image: registry.gitlab.com/musicscience37projects/docker/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=extern,line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc ./include
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"
  interruptible: true

pre-commit:
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang13
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - poetry run pre-commit run --all-files
  cache:
    key:
      prefix: cache-${CI_JOB_NAME}
      files:
        - poetry.lock
    paths:
      - .venv
  interruptible: true

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
  interruptible: true

test release:
  stage: test
  needs: []
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CONAN_LIBCXX: libstdc++11
        CXX_STANDARD: 14
      - COMPILER_TYPE: ["clang13"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
        CXX_STANDARD: 14
  image: ${IMAGE_PATH}:${COMPILER_TYPE}
  variables:
    BUILD_TYPE: Release
    BUILD_DIR: build_${COMPILER_TYPE}_release
    CCACHE_DIR: ${CI_PROJECT_DIR}/.cache
    CCACHE_COMPILERCHECK: content
    CONAN_USER_HOME: ${CI_PROJECT_DIR}
  before_script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - poetry run conan profile new --force --detect default
    - poetry run conan profile update settings.compiler.libcxx=$CONAN_LIBCXX default
    - poetry run conan install --build missing -s build_type=$BUILD_TYPE -o requirements_for_tests=True ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -D${UPPER_PROJECT_NAME}_TESTING:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_UNIT_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_INTEG_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_BENCH=ON
      -D${UPPER_PROJECT_NAME}_TEST_BENCHMARKS=ON
      -D${UPPER_PROJECT_NAME}_BUILD_EXAMPLES=ON
      -D${UPPER_PROJECT_NAME}_TEST_EXAMPLES=ON
      -D${UPPER_PROJECT_NAME}_WRITE_JUNIT:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_CCACHE:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
  cache:
    key:
      prefix: cache-${CI_JOB_NAME}
      files:
        - poetry.lock
        - conanfile.py
    paths:
      - .cache
      - .conan
      - .venv
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"
  interruptible: true

test debug:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CONAN_LIBCXX: libstdc++11
        CXX_STANDARD: 14
      - COMPILER_TYPE: ["clang13"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
        CXX_STANDARD: 14
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_${COMPILER_TYPE}_debug
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -D${UPPER_PROJECT_NAME}_TESTING:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_UNIT_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_INTEG_TESTS=ON
      -D${UPPER_PROJECT_NAME}_BUILD_EXAMPLES=ON
      -D${UPPER_PROJECT_NAME}_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

static analysis:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang13"
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
        CXX_STANDARD: 14
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_static_analysis
  script:
    - cmake -S ./ -B ${BUILD_DIR}
      -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
      -D${UPPER_PROJECT_NAME}_TESTING:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_UNIT_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_INTEG_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_BENCH=ON
      -D${UPPER_PROJECT_NAME}_BUILD_EXAMPLES=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_CPP_WARNINGS:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - poetry run clang-tidy-checker -b ${BUILD_DIR}

clang coverage:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang13"
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
        CXX_STANDARD: 14
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -D${UPPER_PROJECT_NAME}_TESTING:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_UNIT_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_INTEG_TESTS=ON
      -D${UPPER_PROJECT_NAME}_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      -D${UPPER_PROJECT_NAME}_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - poetry run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

clang-13-asan-ubsan:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang13"
        IMAGE_PATH: "musicscience37/clang-ci"
        CONAN_LIBCXX: libc++
        CXX_STANDARD: 14
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: "alloc_dealloc_mismatch=0"
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -D${UPPER_PROJECT_NAME}_TESTING:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_UNIT_TESTS=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_INTEG_TESTS=ON
      -D${UPPER_PROJECT_NAME}_WRITE_JUNIT:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_AUSAN:BOOL=ON
      -D${UPPER_PROJECT_NAME}_ENABLE_CCACHE:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

# TODO
.clang-13-conan:
  needs: []
  image: musicscience37/clang-ci:clang13
  variables:
    CONAN_CHANNEL: "testing"
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - poetry run conan profile new --force --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan create --build missing --test-folder tests/conan_package . ${CONAN_USER}/${CONAN_CHANNEL}
  interruptible: true

# TODO
.clang-13-conan-release:
  stage: deploy
  needs: []
  image: musicscience37/clang-ci:clang13
  variables:
    CONAN_CHANNEL: "stable"
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - poetry run conan profile new --force --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan remote add -f cpp-shm-stream https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/conan
    - poetry run conan create --build missing --test-folder tests/conan_package . ${CONAN_USER}/${CONAN_CHANNEL}
    - CONAN_LOGIN_USERNAME=ci_user CONAN_PASSWORD=${CI_JOB_TOKEN} poetry run conan upload -r cpp-shm-stream ${CONAN_PACKAGE_NAME} -c --all
  only:
    - tags
  interruptible: true

doc:
  stage: test
  needs: []
  image: musicscience37/sphinx-doxygen:clang13
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_TYPE: Release
    CONAN_LIBCXX: libc++
    BUILD_DIR: build_doc
  before_script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - poetry run conan profile new --force --detect default
    - poetry run conan profile update settings.compiler.libcxx=$CONAN_LIBCXX default
    - poetry run conan install --build missing -s build_type=$BUILD_TYPE ..
    - cd ../
  script:
    - cmake -S ./ -B build_doc
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -D${UPPER_PROJECT_NAME}_BUILD_DOC:BOOL=ON
    - cmake --build build_doc --target ${LOWER_PROJECT_NAME}_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "3 mos"
  interruptible: true

pages:
  stage: deploy
  only:
    - develop
  needs:
    - doc
    - clang coverage
    - line count
  dependencies:
    - doc
    - clang coverage
    - line count
  script:
    - rm -rf public
    - mv build_doc/doc/html public
    - mv build_clang_coverage/coverage/html public/coverage
    - mv line_count public/line_count
  artifacts:
    paths:
      - public
